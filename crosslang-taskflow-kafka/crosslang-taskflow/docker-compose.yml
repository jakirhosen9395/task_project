version: "3.9"

services:
  # -----------------------
  # MongoDB
  # -----------------------
  mongodb:
    image: mongo:6
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  # -----------------------
  # Kafka (KRaft mode - no Zookeeper)
  # -----------------------
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
      - "9997:9997"
    environment:
      CLUSTER_ID: "HPV5n4tkTy27ZdyCQv2f3A"   # ðŸ‘ˆ your cluster ID
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_LISTENERS: "PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:29093"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9997
      KAFKA_LOG_DIRS: "/var/lib/kafka/data"
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:   # ðŸ‘ˆ Added healthcheck
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 10

  # -----------------------
  # Kafka UI
  # -----------------------
  kafka_ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka_ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_JMXPORT: 9997
    restart: always

  # -----------------------
  # Kafka Topic Initializer
  # -----------------------
  kafka-init:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - ./init-kafka.sh:/init-kafka.sh
    command: ["bash", "/init-kafka.sh"]
    restart: "no"

  # -----------------------
  # Auth Service
  # -----------------------
  auth_service:
    build: ./auth_service
    container_name: auth_service
    ports:
      - "${AUTH_PORT}:8001"
    env_file: .env
    environment:
      - MONGO_URI=${MONGO_URI}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRE_DAYS=${JWT_EXPIRE_DAYS}
    depends_on:
      - mongodb

  # -----------------------
  # Todo Service
  # -----------------------
  todo_service:
    build: ./todo_service
    container_name: todo_service
    ports:
      - "${TODO_PORT}:8002"
    env_file: .env
    environment:
      - MONGO_URI=${MONGO_URI}
      - DB_NAME=${DB_NAME}
      - KAFKA_BROKERS=${KAFKA_BROKERS}
    depends_on:
      mongodb:
        condition: service_started
      kafka:
        condition: service_healthy
    restart: unless-stopped

  # -----------------------
  # Analytics Service
  # -----------------------
  analytics_service:
    build: ./analytics_service
    container_name: analytics_service
    ports:
      - "${ANALYTICS_PORT}:8003"
    env_file: .env
    environment:
      - MONGO_URI=${MONGO_URI}
      - DB_NAME=${DB_NAME}
      - KAFKA_BROKERS=${KAFKA_BROKERS}
    depends_on:
      mongodb:
        condition: service_started
      kafka:
        condition: service_healthy
    restart: unless-stopped

  # -----------------------
  # Frontend (Nginx)
  # -----------------------
  frontend:
    build: ./frontend_complete
    container_name: frontend
    ports:
      - "${FRONTEND_PORT}:80"
    env_file: .env
    environment:
      - VITE_AUTH_URL=${VITE_AUTH_URL}
      - VITE_TODO_URL=${VITE_TODO_URL}
      - VITE_ANALYTICS_URL=${VITE_ANALYTICS_URL}
    depends_on:
      - auth_service
      - todo_service
      - analytics_service

volumes:
  mongo_data:
  kafka_data:
